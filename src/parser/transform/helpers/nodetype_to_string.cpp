#include "duckdb/parser/transformer.hpp"

using namespace duckdb;

std::string Transformer::NodetypeToString(postgres::NodeTag type) {
	switch (type) {
	case postgres::T_Invalid:
		return "T_Invalid";
	case postgres::T_IndexInfo:
		return "T_IndexInfo";
	case postgres::T_ExprContext:
		return "T_ExprContext";
	case postgres::T_ProjectionInfo:
		return "T_ProjectionInfo";
	case postgres::T_JunkFilter:
		return "T_JunkFilter";
	case postgres::T_ResultRelInfo:
		return "T_ResultRelInfo";
	case postgres::T_EState:
		return "T_EState";
	case postgres::T_TupleTableSlot:
		return "T_TupleTableSlot";
	case postgres::T_Plan:
		return "T_Plan";
	case postgres::T_Result:
		return "T_Result";
	case postgres::T_ProjectSet:
		return "T_ProjectSet";
	case postgres::T_ModifyTable:
		return "T_ModifyTable";
	case postgres::T_Append:
		return "T_Append";
	case postgres::T_MergeAppend:
		return "T_MergeAppend";
	case postgres::T_RecursiveUnion:
		return "T_RecursiveUnion";
	case postgres::T_BitmapAnd:
		return "T_BitmapAnd";
	case postgres::T_BitmapOr:
		return "T_BitmapOr";
	case postgres::T_Scan:
		return "T_Scan";
	case postgres::T_SeqScan:
		return "T_SeqScan";
	case postgres::T_SampleScan:
		return "T_SampleScan";
	case postgres::T_IndexScan:
		return "T_IndexScan";
	case postgres::T_IndexOnlyScan:
		return "T_IndexOnlyScan";
	case postgres::T_BitmapIndexScan:
		return "T_BitmapIndexScan";
	case postgres::T_BitmapHeapScan:
		return "T_BitmapHeapScan";
	case postgres::T_TidScan:
		return "T_TidScan";
	case postgres::T_SubqueryScan:
		return "T_SubqueryScan";
	case postgres::T_FunctionScan:
		return "T_FunctionScan";
	case postgres::T_ValuesScan:
		return "T_ValuesScan";
	case postgres::T_TableFuncScan:
		return "T_TableFuncScan";
	case postgres::T_CteScan:
		return "T_CteScan";
	case postgres::T_NamedTuplestoreScan:
		return "T_NamedTuplestoreScan";
	case postgres::T_WorkTableScan:
		return "T_WorkTableScan";
	case postgres::T_ForeignScan:
		return "T_ForeignScan";
	case postgres::T_CustomScan:
		return "T_CustomScan";
	case postgres::T_Join:
		return "T_Join";
	case postgres::T_NestLoop:
		return "T_NestLoop";
	case postgres::T_MergeJoin:
		return "T_MergeJoin";
	case postgres::T_HashJoin:
		return "T_HashJoin";
	case postgres::T_Material:
		return "T_Material";
	case postgres::T_Sort:
		return "T_Sort";
	case postgres::T_Group:
		return "T_Group";
	case postgres::T_Agg:
		return "T_Agg";
	case postgres::T_WindowAgg:
		return "T_WindowAgg";
	case postgres::T_Unique:
		return "T_Unique";
	case postgres::T_Gather:
		return "T_Gather";
	case postgres::T_GatherMerge:
		return "T_GatherMerge";
	case postgres::T_Hash:
		return "T_Hash";
	case postgres::T_SetOp:
		return "T_SetOp";
	case postgres::T_LockRows:
		return "T_LockRows";
	case postgres::T_Limit:
		return "T_Limit";
	case postgres::T_NestLoopParam:
		return "T_NestLoopParam";
	case postgres::T_PlanRowMark:
		return "T_PlanRowMark";
	case postgres::T_PlanInvalItem:
		return "T_PlanInvalItem";
	case postgres::T_PlanState:
		return "T_PlanState";
	case postgres::T_ResultState:
		return "T_ResultState";
	case postgres::T_ProjectSetState:
		return "T_ProjectSetState";
	case postgres::T_ModifyTableState:
		return "T_ModifyTableState";
	case postgres::T_AppendState:
		return "T_AppendState";
	case postgres::T_MergeAppendState:
		return "T_MergeAppendState";
	case postgres::T_RecursiveUnionState:
		return "T_RecursiveUnionState";
	case postgres::T_BitmapAndState:
		return "T_BitmapAndState";
	case postgres::T_BitmapOrState:
		return "T_BitmapOrState";
	case postgres::T_ScanState:
		return "T_ScanState";
	case postgres::T_SeqScanState:
		return "T_SeqScanState";
	case postgres::T_SampleScanState:
		return "T_SampleScanState";
	case postgres::T_IndexScanState:
		return "T_IndexScanState";
	case postgres::T_IndexOnlyScanState:
		return "T_IndexOnlyScanState";
	case postgres::T_BitmapIndexScanState:
		return "T_BitmapIndexScanState";
	case postgres::T_BitmapHeapScanState:
		return "T_BitmapHeapScanState";
	case postgres::T_TidScanState:
		return "T_TidScanState";
	case postgres::T_SubqueryScanState:
		return "T_SubqueryScanState";
	case postgres::T_FunctionScanState:
		return "T_FunctionScanState";
	case postgres::T_TableFuncScanState:
		return "T_TableFuncScanState";
	case postgres::T_ValuesScanState:
		return "T_ValuesScanState";
	case postgres::T_CteScanState:
		return "T_CteScanState";
	case postgres::T_NamedTuplestoreScanState:
		return "T_NamedTuplestoreScanState";
	case postgres::T_WorkTableScanState:
		return "T_WorkTableScanState";
	case postgres::T_ForeignScanState:
		return "T_ForeignScanState";
	case postgres::T_CustomScanState:
		return "T_CustomScanState";
	case postgres::T_JoinState:
		return "T_JoinState";
	case postgres::T_NestLoopState:
		return "T_NestLoopState";
	case postgres::T_MergeJoinState:
		return "T_MergeJoinState";
	case postgres::T_HashJoinState:
		return "T_HashJoinState";
	case postgres::T_MaterialState:
		return "T_MaterialState";
	case postgres::T_SortState:
		return "T_SortState";
	case postgres::T_GroupState:
		return "T_GroupState";
	case postgres::T_AggState:
		return "T_AggState";
	case postgres::T_WindowAggState:
		return "T_WindowAggState";
	case postgres::T_UniqueState:
		return "T_UniqueState";
	case postgres::T_GatherState:
		return "T_GatherState";
	case postgres::T_GatherMergeState:
		return "T_GatherMergeState";
	case postgres::T_HashState:
		return "T_HashState";
	case postgres::T_SetOpState:
		return "T_SetOpState";
	case postgres::T_LockRowsState:
		return "T_LockRowsState";
	case postgres::T_LimitState:
		return "T_LimitState";
	case postgres::T_Alias:
		return "T_Alias";
	case postgres::T_RangeVar:
		return "T_RangeVar";
	case postgres::T_TableFunc:
		return "T_TableFunc";
	case postgres::T_Expr:
		return "T_Expr";
	case postgres::T_Var:
		return "T_Var";
	case postgres::T_Const:
		return "T_Const";
	case postgres::T_Param:
		return "T_Param";
	case postgres::T_Aggref:
		return "T_Aggref";
	case postgres::T_GroupingFunc:
		return "T_GroupingFunc";
	case postgres::T_WindowFunc:
		return "T_WindowFunc";
	case postgres::T_ArrayRef:
		return "T_ArrayRef";
	case postgres::T_FuncExpr:
		return "T_FuncExpr";
	case postgres::T_NamedArgExpr:
		return "T_NamedArgExpr";
	case postgres::T_OpExpr:
		return "T_OpExpr";
	case postgres::T_DistinctExpr:
		return "T_DistinctExpr";
	case postgres::T_NullIfExpr:
		return "T_NullIfExpr";
	case postgres::T_ScalarArrayOpExpr:
		return "T_ScalarArrayOpExpr";
	case postgres::T_BoolExpr:
		return "T_BoolExpr";
	case postgres::T_SubLink:
		return "T_SubLink";
	case postgres::T_SubPlan:
		return "T_SubPlan";
	case postgres::T_AlternativeSubPlan:
		return "T_AlternativeSubPlan";
	case postgres::T_FieldSelect:
		return "T_FieldSelect";
	case postgres::T_FieldStore:
		return "T_FieldStore";
	case postgres::T_RelabelType:
		return "T_RelabelType";
	case postgres::T_CoerceViaIO:
		return "T_CoerceViaIO";
	case postgres::T_ArrayCoerceExpr:
		return "T_ArrayCoerceExpr";
	case postgres::T_ConvertRowtypeExpr:
		return "T_ConvertRowtypeExpr";
	case postgres::T_CollateExpr:
		return "T_CollateExpr";
	case postgres::T_CaseExpr:
		return "T_CaseExpr";
	case postgres::T_CaseWhen:
		return "T_CaseWhen";
	case postgres::T_CaseTestExpr:
		return "T_CaseTestExpr";
	case postgres::T_ArrayExpr:
		return "T_ArrayExpr";
	case postgres::T_RowExpr:
		return "T_RowExpr";
	case postgres::T_RowCompareExpr:
		return "T_RowCompareExpr";
	case postgres::T_CoalesceExpr:
		return "T_CoalesceExpr";
	case postgres::T_MinMaxExpr:
		return "T_MinMaxExpr";
	case postgres::T_SQLValueFunction:
		return "T_SQLValueFunction";
	case postgres::T_XmlExpr:
		return "T_XmlExpr";
	case postgres::T_NullTest:
		return "T_NullTest";
	case postgres::T_BooleanTest:
		return "T_BooleanTest";
	case postgres::T_CoerceToDomain:
		return "T_CoerceToDomain";
	case postgres::T_CoerceToDomainValue:
		return "T_CoerceToDomainValue";
	case postgres::T_SetToDefault:
		return "T_SetToDefault";
	case postgres::T_CurrentOfExpr:
		return "T_CurrentOfExpr";
	case postgres::T_NextValueExpr:
		return "T_NextValueExpr";
	case postgres::T_InferenceElem:
		return "T_InferenceElem";
	case postgres::T_TargetEntry:
		return "T_TargetEntry";
	case postgres::T_RangeTblRef:
		return "T_RangeTblRef";
	case postgres::T_JoinExpr:
		return "T_JoinExpr";
	case postgres::T_FromExpr:
		return "T_FromExpr";
	case postgres::T_OnConflictExpr:
		return "T_OnConflictExpr";
	case postgres::T_IntoClause:
		return "T_IntoClause";
	case postgres::T_ExprState:
		return "T_ExprState";
	case postgres::T_AggrefExprState:
		return "T_AggrefExprState";
	case postgres::T_WindowFuncExprState:
		return "T_WindowFuncExprState";
	case postgres::T_SetExprState:
		return "T_SetExprState";
	case postgres::T_SubPlanState:
		return "T_SubPlanState";
	case postgres::T_AlternativeSubPlanState:
		return "T_AlternativeSubPlanState";
	case postgres::T_DomainConstraintState:
		return "T_DomainConstraintState";
	case postgres::T_PlannerInfo:
		return "T_PlannerInfo";
	case postgres::T_PlannerGlobal:
		return "T_PlannerGlobal";
	case postgres::T_RelOptInfo:
		return "T_RelOptInfo";
	case postgres::T_IndexOptInfo:
		return "T_IndexOptInfo";
	case postgres::T_ForeignKeyOptInfo:
		return "T_ForeignKeyOptInfo";
	case postgres::T_ParamPathInfo:
		return "T_ParamPathInfo";
	case postgres::T_Path:
		return "T_Path";
	case postgres::T_IndexPath:
		return "T_IndexPath";
	case postgres::T_BitmapHeapPath:
		return "T_BitmapHeapPath";
	case postgres::T_BitmapAndPath:
		return "T_BitmapAndPath";
	case postgres::T_BitmapOrPath:
		return "T_BitmapOrPath";
	case postgres::T_TidPath:
		return "T_TidPath";
	case postgres::T_SubqueryScanPath:
		return "T_SubqueryScanPath";
	case postgres::T_ForeignPath:
		return "T_ForeignPath";
	case postgres::T_CustomPath:
		return "T_CustomPath";
	case postgres::T_NestPath:
		return "T_NestPath";
	case postgres::T_MergePath:
		return "T_MergePath";
	case postgres::T_HashPath:
		return "T_HashPath";
	case postgres::T_AppendPath:
		return "T_AppendPath";
	case postgres::T_MergeAppendPath:
		return "T_MergeAppendPath";
	case postgres::T_ResultPath:
		return "T_ResultPath";
	case postgres::T_MaterialPath:
		return "T_MaterialPath";
	case postgres::T_UniquePath:
		return "T_UniquePath";
	case postgres::T_GatherPath:
		return "T_GatherPath";
	case postgres::T_GatherMergePath:
		return "T_GatherMergePath";
	case postgres::T_ProjectionPath:
		return "T_ProjectionPath";
	case postgres::T_ProjectSetPath:
		return "T_ProjectSetPath";
	case postgres::T_SortPath:
		return "T_SortPath";
	case postgres::T_GroupPath:
		return "T_GroupPath";
	case postgres::T_UpperUniquePath:
		return "T_UpperUniquePath";
	case postgres::T_AggPath:
		return "T_AggPath";
	case postgres::T_GroupingSetsPath:
		return "T_GroupingSetsPath";
	case postgres::T_MinMaxAggPath:
		return "T_MinMaxAggPath";
	case postgres::T_WindowAggPath:
		return "T_WindowAggPath";
	case postgres::T_SetOpPath:
		return "T_SetOpPath";
	case postgres::T_RecursiveUnionPath:
		return "T_RecursiveUnionPath";
	case postgres::T_LockRowsPath:
		return "T_LockRowsPath";
	case postgres::T_ModifyTablePath:
		return "T_ModifyTablePath";
	case postgres::T_LimitPath:
		return "T_LimitPath";
	case postgres::T_EquivalenceClass:
		return "T_EquivalenceClass";
	case postgres::T_EquivalenceMember:
		return "T_EquivalenceMember";
	case postgres::T_PathKey:
		return "T_PathKey";
	case postgres::T_PathTarget:
		return "T_PathTarget";
	case postgres::T_RestrictInfo:
		return "T_RestrictInfo";
	case postgres::T_PlaceHolderVar:
		return "T_PlaceHolderVar";
	case postgres::T_SpecialJoinInfo:
		return "T_SpecialJoinInfo";
	case postgres::T_AppendRelInfo:
		return "T_AppendRelInfo";
	case postgres::T_PartitionedChildRelInfo:
		return "T_PartitionedChildRelInfo";
	case postgres::T_PlaceHolderInfo:
		return "T_PlaceHolderInfo";
	case postgres::T_MinMaxAggInfo:
		return "T_MinMaxAggInfo";
	case postgres::T_PlannerParamItem:
		return "T_PlannerParamItem";
	case postgres::T_RollupData:
		return "T_RollupData";
	case postgres::T_GroupingSetData:
		return "T_GroupingSetData";
	case postgres::T_StatisticExtInfo:
		return "T_StatisticExtInfo";
	case postgres::T_MemoryContext:
		return "T_MemoryContext";
	case postgres::T_AllocSetContext:
		return "T_AllocSetContext";
	case postgres::T_SlabContext:
		return "T_SlabContext";
	case postgres::T_Value:
		return "T_Value";
	case postgres::T_Integer:
		return "T_Integer";
	case postgres::T_Float:
		return "T_Float";
	case postgres::T_String:
		return "T_String";
	case postgres::T_BitString:
		return "T_BitString";
	case postgres::T_Null:
		return "T_Null";
	case postgres::T_List:
		return "T_List";
	case postgres::T_IntList:
		return "T_IntList";
	case postgres::T_OidList:
		return "T_OidList";
	case postgres::T_ExtensibleNode:
		return "T_ExtensibleNode";
	case postgres::T_RawStmt:
		return "T_RawStmt";
	case postgres::T_Query:
		return "T_Query";
	case postgres::T_PlannedStmt:
		return "T_PlannedStmt";
	case postgres::T_InsertStmt:
		return "T_InsertStmt";
	case postgres::T_DeleteStmt:
		return "T_DeleteStmt";
	case postgres::T_UpdateStmt:
		return "T_UpdateStmt";
	case postgres::T_SelectStmt:
		return "T_SelectStmt";
	case postgres::T_AlterTableStmt:
		return "T_AlterTableStmt";
	case postgres::T_AlterTableCmd:
		return "T_AlterTableCmd";
	case postgres::T_AlterDomainStmt:
		return "T_AlterDomainStmt";
	case postgres::T_SetOperationStmt:
		return "T_SetOperationStmt";
	case postgres::T_GrantStmt:
		return "T_GrantStmt";
	case postgres::T_GrantRoleStmt:
		return "T_GrantRoleStmt";
	case postgres::T_AlterDefaultPrivilegesStmt:
		return "T_AlterDefaultPrivilegesStmt";
	case postgres::T_ClosePortalStmt:
		return "T_ClosePortalStmt";
	case postgres::T_ClusterStmt:
		return "T_ClusterStmt";
	case postgres::T_CopyStmt:
		return "T_CopyStmt";
	case postgres::T_CreateStmt:
		return "T_CreateStmt";
	case postgres::T_DefineStmt:
		return "T_DefineStmt";
	case postgres::T_DropStmt:
		return "T_DropStmt";
	case postgres::T_TruncateStmt:
		return "T_TruncateStmt";
	case postgres::T_CommentStmt:
		return "T_CommentStmt";
	case postgres::T_FetchStmt:
		return "T_FetchStmt";
	case postgres::T_IndexStmt:
		return "T_IndexStmt";
	case postgres::T_CreateFunctionStmt:
		return "T_CreateFunctionStmt";
	case postgres::T_AlterFunctionStmt:
		return "T_AlterFunctionStmt";
	case postgres::T_DoStmt:
		return "T_DoStmt";
	case postgres::T_RenameStmt:
		return "T_RenameStmt";
	case postgres::T_RuleStmt:
		return "T_RuleStmt";
	case postgres::T_NotifyStmt:
		return "T_NotifyStmt";
	case postgres::T_ListenStmt:
		return "T_ListenStmt";
	case postgres::T_UnlistenStmt:
		return "T_UnlistenStmt";
	case postgres::T_TransactionStmt:
		return "T_TransactionStmt";
	case postgres::T_ViewStmt:
		return "T_ViewStmt";
	case postgres::T_LoadStmt:
		return "T_LoadStmt";
	case postgres::T_CreateDomainStmt:
		return "T_CreateDomainStmt";
	case postgres::T_CreatedbStmt:
		return "T_CreatedbStmt";
	case postgres::T_DropdbStmt:
		return "T_DropdbStmt";
	case postgres::T_VacuumStmt:
		return "T_VacuumStmt";
	case postgres::T_ExplainStmt:
		return "T_ExplainStmt";
	case postgres::T_CreateTableAsStmt:
		return "T_CreateTableAsStmt";
	case postgres::T_CreateSeqStmt:
		return "T_CreateSeqStmt";
	case postgres::T_AlterSeqStmt:
		return "T_AlterSeqStmt";
	case postgres::T_VariableSetStmt:
		return "T_VariableSetStmt";
	case postgres::T_VariableShowStmt:
		return "T_VariableShowStmt";
	case postgres::T_DiscardStmt:
		return "T_DiscardStmt";
	case postgres::T_CreateTrigStmt:
		return "T_CreateTrigStmt";
	case postgres::T_CreatePLangStmt:
		return "T_CreatePLangStmt";
	case postgres::T_CreateRoleStmt:
		return "T_CreateRoleStmt";
	case postgres::T_AlterRoleStmt:
		return "T_AlterRoleStmt";
	case postgres::T_DropRoleStmt:
		return "T_DropRoleStmt";
	case postgres::T_LockStmt:
		return "T_LockStmt";
	case postgres::T_ConstraintsSetStmt:
		return "T_ConstraintsSetStmt";
	case postgres::T_ReindexStmt:
		return "T_ReindexStmt";
	case postgres::T_CheckPointStmt:
		return "T_CheckPointStmt";
	case postgres::T_CreateSchemaStmt:
		return "T_CreateSchemaStmt";
	case postgres::T_AlterDatabaseStmt:
		return "T_AlterDatabaseStmt";
	case postgres::T_AlterDatabaseSetStmt:
		return "T_AlterDatabaseSetStmt";
	case postgres::T_AlterRoleSetStmt:
		return "T_AlterRoleSetStmt";
	case postgres::T_CreateConversionStmt:
		return "T_CreateConversionStmt";
	case postgres::T_CreateCastStmt:
		return "T_CreateCastStmt";
	case postgres::T_CreateOpClassStmt:
		return "T_CreateOpClassStmt";
	case postgres::T_CreateOpFamilyStmt:
		return "T_CreateOpFamilyStmt";
	case postgres::T_AlterOpFamilyStmt:
		return "T_AlterOpFamilyStmt";
	case postgres::T_PrepareStmt:
		return "T_PrepareStmt";
	case postgres::T_ExecuteStmt:
		return "T_ExecuteStmt";
	case postgres::T_DeallocateStmt:
		return "T_DeallocateStmt";
	case postgres::T_DeclareCursorStmt:
		return "T_DeclareCursorStmt";
	case postgres::T_CreateTableSpaceStmt:
		return "T_CreateTableSpaceStmt";
	case postgres::T_DropTableSpaceStmt:
		return "T_DropTableSpaceStmt";
	case postgres::T_AlterObjectDependsStmt:
		return "T_AlterObjectDependsStmt";
	case postgres::T_AlterObjectSchemaStmt:
		return "T_AlterObjectSchemaStmt";
	case postgres::T_AlterOwnerStmt:
		return "T_AlterOwnerStmt";
	case postgres::T_AlterOperatorStmt:
		return "T_AlterOperatorStmt";
	case postgres::T_DropOwnedStmt:
		return "T_DropOwnedStmt";
	case postgres::T_ReassignOwnedStmt:
		return "T_ReassignOwnedStmt";
	case postgres::T_CompositeTypeStmt:
		return "T_CompositeTypeStmt";
	case postgres::T_CreateEnumStmt:
		return "T_CreateEnumStmt";
	case postgres::T_CreateRangeStmt:
		return "T_CreateRangeStmt";
	case postgres::T_AlterEnumStmt:
		return "T_AlterEnumStmt";
	case postgres::T_AlterTSDictionaryStmt:
		return "T_AlterTSDictionaryStmt";
	case postgres::T_AlterTSConfigurationStmt:
		return "T_AlterTSConfigurationStmt";
	case postgres::T_CreateFdwStmt:
		return "T_CreateFdwStmt";
	case postgres::T_AlterFdwStmt:
		return "T_AlterFdwStmt";
	case postgres::T_CreateForeignServerStmt:
		return "T_CreateForeignServerStmt";
	case postgres::T_AlterForeignServerStmt:
		return "T_AlterForeignServerStmt";
	case postgres::T_CreateUserMappingStmt:
		return "T_CreateUserMappingStmt";
	case postgres::T_AlterUserMappingStmt:
		return "T_AlterUserMappingStmt";
	case postgres::T_DropUserMappingStmt:
		return "T_DropUserMappingStmt";
	case postgres::T_AlterTableSpaceOptionsStmt:
		return "T_AlterTableSpaceOptionsStmt";
	case postgres::T_AlterTableMoveAllStmt:
		return "T_AlterTableMoveAllStmt";
	case postgres::T_SecLabelStmt:
		return "T_SecLabelStmt";
	case postgres::T_CreateForeignTableStmt:
		return "T_CreateForeignTableStmt";
	case postgres::T_ImportForeignSchemaStmt:
		return "T_ImportForeignSchemaStmt";
	case postgres::T_CreateExtensionStmt:
		return "T_CreateExtensionStmt";
	case postgres::T_AlterExtensionStmt:
		return "T_AlterExtensionStmt";
	case postgres::T_AlterExtensionContentsStmt:
		return "T_AlterExtensionContentsStmt";
	case postgres::T_CreateEventTrigStmt:
		return "T_CreateEventTrigStmt";
	case postgres::T_AlterEventTrigStmt:
		return "T_AlterEventTrigStmt";
	case postgres::T_RefreshMatViewStmt:
		return "T_RefreshMatViewStmt";
	case postgres::T_ReplicaIdentityStmt:
		return "T_ReplicaIdentityStmt";
	case postgres::T_AlterSystemStmt:
		return "T_AlterSystemStmt";
	case postgres::T_CreatePolicyStmt:
		return "T_CreatePolicyStmt";
	case postgres::T_AlterPolicyStmt:
		return "T_AlterPolicyStmt";
	case postgres::T_CreateTransformStmt:
		return "T_CreateTransformStmt";
	case postgres::T_CreateAmStmt:
		return "T_CreateAmStmt";
	case postgres::T_CreatePublicationStmt:
		return "T_CreatePublicationStmt";
	case postgres::T_AlterPublicationStmt:
		return "T_AlterPublicationStmt";
	case postgres::T_CreateSubscriptionStmt:
		return "T_CreateSubscriptionStmt";
	case postgres::T_AlterSubscriptionStmt:
		return "T_AlterSubscriptionStmt";
	case postgres::T_DropSubscriptionStmt:
		return "T_DropSubscriptionStmt";
	case postgres::T_CreateStatsStmt:
		return "T_CreateStatsStmt";
	case postgres::T_AlterCollationStmt:
		return "T_AlterCollationStmt";
	case postgres::T_A_Expr:
		return "T_A_Expr";
	case postgres::T_ColumnRef:
		return "T_ColumnRef";
	case postgres::T_ParamRef:
		return "T_ParamRef";
	case postgres::T_A_Const:
		return "T_A_Const";
	case postgres::T_FuncCall:
		return "T_FuncCall";
	case postgres::T_A_Star:
		return "T_A_Star";
	case postgres::T_A_Indices:
		return "T_A_Indices";
	case postgres::T_A_Indirection:
		return "T_A_Indirection";
	case postgres::T_A_ArrayExpr:
		return "T_A_ArrayExpr";
	case postgres::T_ResTarget:
		return "T_ResTarget";
	case postgres::T_MultiAssignRef:
		return "T_MultiAssignRef";
	case postgres::T_TypeCast:
		return "T_TypeCast";
	case postgres::T_CollateClause:
		return "T_CollateClause";
	case postgres::T_SortBy:
		return "T_SortBy";
	case postgres::T_WindowDef:
		return "T_WindowDef";
	case postgres::T_RangeSubselect:
		return "T_RangeSubselect";
	case postgres::T_RangeFunction:
		return "T_RangeFunction";
	case postgres::T_RangeTableSample:
		return "T_RangeTableSample";
	case postgres::T_RangeTableFunc:
		return "T_RangeTableFunc";
	case postgres::T_RangeTableFuncCol:
		return "T_RangeTableFuncCol";
	case postgres::T_TypeName:
		return "T_TypeName";
	case postgres::T_ColumnDef:
		return "T_ColumnDef";
	case postgres::T_IndexElem:
		return "T_IndexElem";
	case postgres::T_Constraint:
		return "T_Constraint";
	case postgres::T_DefElem:
		return "T_DefElem";
	case postgres::T_RangeTblEntry:
		return "T_RangeTblEntry";
	case postgres::T_RangeTblFunction:
		return "T_RangeTblFunction";
	case postgres::T_TableSampleClause:
		return "T_TableSampleClause";
	case postgres::T_WithCheckOption:
		return "T_WithCheckOption";
	case postgres::T_SortGroupClause:
		return "T_SortGroupClause";
	case postgres::T_GroupingSet:
		return "T_GroupingSet";
	case postgres::T_WindowClause:
		return "T_WindowClause";
	case postgres::T_ObjectWithArgs:
		return "T_ObjectWithArgs";
	case postgres::T_AccessPriv:
		return "T_AccessPriv";
	case postgres::T_CreateOpClassItem:
		return "T_CreateOpClassItem";
	case postgres::T_TableLikeClause:
		return "T_TableLikeClause";
	case postgres::T_FunctionParameter:
		return "T_FunctionParameter";
	case postgres::T_LockingClause:
		return "T_LockingClause";
	case postgres::T_RowMarkClause:
		return "T_RowMarkClause";
	case postgres::T_XmlSerialize:
		return "T_XmlSerialize";
	case postgres::T_WithClause:
		return "T_WithClause";
	case postgres::T_InferClause:
		return "T_InferClause";
	case postgres::T_OnConflictClause:
		return "T_OnConflictClause";
	case postgres::T_CommonTableExpr:
		return "T_CommonTableExpr";
	case postgres::T_RoleSpec:
		return "T_RoleSpec";
	case postgres::T_TriggerTransition:
		return "T_TriggerTransition";
	case postgres::T_PartitionElem:
		return "T_PartitionElem";
	case postgres::T_PartitionSpec:
		return "T_PartitionSpec";
	case postgres::T_PartitionBoundSpec:
		return "T_PartitionBoundSpec";
	case postgres::T_PartitionRangeDatum:
		return "T_PartitionRangeDatum";
	case postgres::T_PartitionCmd:
		return "T_PartitionCmd";
	case postgres::T_IdentifySystemCmd:
		return "T_IdentifySystemCmd";
	case postgres::T_BaseBackupCmd:
		return "T_BaseBackupCmd";
	case postgres::T_CreateReplicationSlotCmd:
		return "T_CreateReplicationSlotCmd";
	case postgres::T_DropReplicationSlotCmd:
		return "T_DropReplicationSlotCmd";
	case postgres::T_StartReplicationCmd:
		return "T_StartReplicationCmd";
	case postgres::T_TimeLineHistoryCmd:
		return "T_TimeLineHistoryCmd";
	case postgres::T_SQLCmd:
		return "T_SQLCmd";
	case postgres::T_TriggerData:
		return "T_TriggerData";
	case postgres::T_EventTriggerData:
		return "T_EventTriggerData";
	case postgres::T_ReturnSetInfo:
		return "T_ReturnSetInfo";
	case postgres::T_WindowObjectData:
		return "T_WindowObjectData";
	case postgres::T_TIDBitmap:
		return "T_TIDBitmap";
	case postgres::T_InlineCodeBlock:
		return "T_InlineCodeBlock";
	case postgres::T_FdwRoutine:
		return "T_FdwRoutine";
	case postgres::T_IndexAmRoutine:
		return "T_IndexAmRoutine";
	case postgres::T_TsmRoutine:
		return "T_TsmRoutine";
	case postgres::T_ForeignKeyCacheInfo:
		return "T_ForeignKeyCacheInfo";
	default:
		assert(0);
		return "";
	}
}
